// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ocboogie/pixel-art/services/authenticating (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/ocboogie/pixel-art/models"
	reflect "reflect"
)

// ServiceAuthenticating is a mock of Service interface
type ServiceAuthenticating struct {
	ctrl     *gomock.Controller
	recorder *ServiceAuthenticatingMockRecorder
}

// ServiceAuthenticatingMockRecorder is the mock recorder for ServiceAuthenticating
type ServiceAuthenticatingMockRecorder struct {
	mock *ServiceAuthenticating
}

// NewServiceAuthenticating creates a new mock instance
func NewServiceAuthenticating(ctrl *gomock.Controller) *ServiceAuthenticating {
	mock := &ServiceAuthenticating{ctrl: ctrl}
	mock.recorder = &ServiceAuthenticatingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *ServiceAuthenticating) EXPECT() *ServiceAuthenticatingMockRecorder {
	return m.recorder
}

// CreateSession mocks base method
func (m *ServiceAuthenticating) CreateSession(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession
func (mr *ServiceAuthenticatingMockRecorder) CreateSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*ServiceAuthenticating)(nil).CreateSession), arg0)
}

// Login mocks base method
func (m *ServiceAuthenticating) Login(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *ServiceAuthenticatingMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*ServiceAuthenticating)(nil).Login), arg0, arg1)
}

// SignUp mocks base method
func (m *ServiceAuthenticating) SignUp(arg0 *models.UserInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp
func (mr *ServiceAuthenticatingMockRecorder) SignUp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*ServiceAuthenticating)(nil).SignUp), arg0)
}

// VerifySession mocks base method
func (m *ServiceAuthenticating) VerifySession(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySession", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifySession indicates an expected call of VerifySession
func (mr *ServiceAuthenticatingMockRecorder) VerifySession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySession", reflect.TypeOf((*ServiceAuthenticating)(nil).VerifySession), arg0)
}
