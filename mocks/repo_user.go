// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ocboogie/pixel-art/repositories (interfaces: User)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/ocboogie/pixel-art/models"
	reflect "reflect"
)

// RepositoryUser is a mock of User interface
type RepositoryUser struct {
	ctrl     *gomock.Controller
	recorder *RepositoryUserMockRecorder
}

// RepositoryUserMockRecorder is the mock recorder for RepositoryUser
type RepositoryUserMockRecorder struct {
	mock *RepositoryUser
}

// NewRepositoryUser creates a new mock instance
func NewRepositoryUser(ctrl *gomock.Controller) *RepositoryUser {
	mock := &RepositoryUser{ctrl: ctrl}
	mock.recorder = &RepositoryUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *RepositoryUser) EXPECT() *RepositoryUserMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *RepositoryUser) Create(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *RepositoryUserMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*RepositoryUser)(nil).Create), arg0)
}

// ExistsEmail mocks base method
func (m *RepositoryUser) ExistsEmail(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsEmail", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsEmail indicates an expected call of ExistsEmail
func (mr *RepositoryUserMockRecorder) ExistsEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsEmail", reflect.TypeOf((*RepositoryUser)(nil).ExistsEmail), arg0)
}

// FindByEmail mocks base method
func (m *RepositoryUser) FindByEmail(arg0 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail
func (mr *RepositoryUserMockRecorder) FindByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*RepositoryUser)(nil).FindByEmail), arg0)
}
