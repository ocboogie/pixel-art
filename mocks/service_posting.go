// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ocboogie/pixel-art/services/posting (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/ocboogie/pixel-art/models"
	reflect "reflect"
)

// ServicePosting is a mock of Service interface
type ServicePosting struct {
	ctrl     *gomock.Controller
	recorder *ServicePostingMockRecorder
}

// ServicePostingMockRecorder is the mock recorder for ServicePosting
type ServicePostingMockRecorder struct {
	mock *ServicePosting
}

// NewServicePosting creates a new mock instance
func NewServicePosting(ctrl *gomock.Controller) *ServicePosting {
	mock := &ServicePosting{ctrl: ctrl}
	mock.recorder = &ServicePostingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *ServicePosting) EXPECT() *ServicePostingMockRecorder {
	return m.recorder
}

// Post mocks base method
func (m *ServicePosting) Post(arg0 models.PostInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (mr *ServicePostingMockRecorder) Post(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*ServicePosting)(nil).Post), arg0)
}
