// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ocboogie/pixel-art/repositories (interfaces: Post)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/ocboogie/pixel-art/models"
	reflect "reflect"
)

// PostRepository is a mock of Post interface
type PostRepository struct {
	ctrl     *gomock.Controller
	recorder *PostRepositoryMockRecorder
}

// PostRepositoryMockRecorder is the mock recorder for PostRepository
type PostRepositoryMockRecorder struct {
	mock *PostRepository
}

// NewPostRepository creates a new mock instance
func NewPostRepository(ctrl *gomock.Controller) *PostRepository {
	mock := &PostRepository{ctrl: ctrl}
	mock.recorder = &PostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *PostRepository) EXPECT() *PostRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *PostRepository) Create(arg0 *models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *PostRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*PostRepository)(nil).Create), arg0)
}

// Find mocks base method
func (m *PostRepository) Find(arg0 string) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *PostRepositoryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*PostRepository)(nil).Find), arg0)
}

// Latest mocks base method
func (m *PostRepository) Latest(arg0 uint) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Latest", arg0)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Latest indicates an expected call of Latest
func (mr *PostRepositoryMockRecorder) Latest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Latest", reflect.TypeOf((*PostRepository)(nil).Latest), arg0)
}
