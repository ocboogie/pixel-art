// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ocboogie/pixel-art/repositories (interfaces: User)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/ocboogie/pixel-art/models"
	reflect "reflect"
)

// UserRepository is a mock of User interface
type UserRepository struct {
	ctrl     *gomock.Controller
	recorder *UserRepositoryMockRecorder
}

// UserRepositoryMockRecorder is the mock recorder for UserRepository
type UserRepositoryMockRecorder struct {
	mock *UserRepository
}

// NewUserRepository creates a new mock instance
func NewUserRepository(ctrl *gomock.Controller) *UserRepository {
	mock := &UserRepository{ctrl: ctrl}
	mock.recorder = &UserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *UserRepository) EXPECT() *UserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *UserRepository) Create(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *UserRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*UserRepository)(nil).Create), arg0)
}

// ExistsEmail mocks base method
func (m *UserRepository) ExistsEmail(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsEmail", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsEmail indicates an expected call of ExistsEmail
func (mr *UserRepositoryMockRecorder) ExistsEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsEmail", reflect.TypeOf((*UserRepository)(nil).ExistsEmail), arg0)
}

// FindByEmail mocks base method
func (m *UserRepository) FindByEmail(arg0 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail
func (mr *UserRepositoryMockRecorder) FindByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*UserRepository)(nil).FindByEmail), arg0)
}
