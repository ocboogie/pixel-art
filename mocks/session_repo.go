// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ocboogie/pixel-art/repositories (interfaces: Session)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/ocboogie/pixel-art/models"
	reflect "reflect"
)

// SessionRepository is a mock of Session interface
type SessionRepository struct {
	ctrl     *gomock.Controller
	recorder *SessionRepositoryMockRecorder
}

// SessionRepositoryMockRecorder is the mock recorder for SessionRepository
type SessionRepositoryMockRecorder struct {
	mock *SessionRepository
}

// NewSessionRepository creates a new mock instance
func NewSessionRepository(ctrl *gomock.Controller) *SessionRepository {
	mock := &SessionRepository{ctrl: ctrl}
	mock.recorder = &SessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *SessionRepository) EXPECT() *SessionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *SessionRepository) Create(arg0 *models.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *SessionRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*SessionRepository)(nil).Create), arg0)
}

// Delete mocks base method
func (m *SessionRepository) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *SessionRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*SessionRepository)(nil).Delete), arg0)
}

// Find mocks base method
func (m *SessionRepository) Find(arg0 string) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *SessionRepositoryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*SessionRepository)(nil).Find), arg0)
}
