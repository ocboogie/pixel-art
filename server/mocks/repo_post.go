// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ocboogie/pixel-art/repositories (interfaces: Post)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ocboogie/pixel-art/models"
	repositories "github.com/ocboogie/pixel-art/repositories"
)

// RepositoryPost is a mock of Post interface.
type RepositoryPost struct {
	ctrl     *gomock.Controller
	recorder *RepositoryPostMockRecorder
}

// RepositoryPostMockRecorder is the mock recorder for RepositoryPost.
type RepositoryPostMockRecorder struct {
	mock *RepositoryPost
}

// NewRepositoryPost creates a new mock instance.
func NewRepositoryPost(ctrl *gomock.Controller) *RepositoryPost {
	mock := &RepositoryPost{ctrl: ctrl}
	mock.recorder = &RepositoryPostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RepositoryPost) EXPECT() *RepositoryPostMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *RepositoryPost) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *RepositoryPostMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*RepositoryPost)(nil).Delete), arg0)
}

// Find mocks base method.
func (m *RepositoryPost) Find(arg0 string, arg1 repositories.PostIncludes) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *RepositoryPostMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*RepositoryPost)(nil).Find), arg0, arg1)
}

// Latest mocks base method.
func (m *RepositoryPost) Latest(arg0 int, arg1 *time.Time, arg2 repositories.PostIncludes) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Latest", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Latest indicates an expected call of Latest.
func (mr *RepositoryPostMockRecorder) Latest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Latest", reflect.TypeOf((*RepositoryPost)(nil).Latest), arg0, arg1, arg2)
}

// PostsByUser mocks base method.
func (m *RepositoryPost) PostsByUser(arg0 string, arg1 int, arg2 *time.Time, arg3 repositories.PostIncludes) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostsByUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostsByUser indicates an expected call of PostsByUser.
func (mr *RepositoryPostMockRecorder) PostsByUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostsByUser", reflect.TypeOf((*RepositoryPost)(nil).PostsByUser), arg0, arg1, arg2, arg3)
}

// Save mocks base method.
func (m *RepositoryPost) Save(arg0 *models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *RepositoryPostMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*RepositoryPost)(nil).Save), arg0)
}
