// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ocboogie/pixel-art/services/profile (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ocboogie/pixel-art/models"
)

// ServiceProfile is a mock of Service interface.
type ServiceProfile struct {
	ctrl     *gomock.Controller
	recorder *ServiceProfileMockRecorder
}

// ServiceProfileMockRecorder is the mock recorder for ServiceProfile.
type ServiceProfileMockRecorder struct {
	mock *ServiceProfile
}

// NewServiceProfile creates a new mock instance.
func NewServiceProfile(ctrl *gomock.Controller) *ServiceProfile {
	mock := &ServiceProfile{ctrl: ctrl}
	mock.recorder = &ServiceProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ServiceProfile) EXPECT() *ServiceProfileMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *ServiceProfile) Find(arg0 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *ServiceProfileMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*ServiceProfile)(nil).Find), arg0)
}

// Update mocks base method.
func (m *ServiceProfile) Update(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *ServiceProfileMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*ServiceProfile)(nil).Update), arg0)
}
