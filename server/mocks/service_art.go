// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ocboogie/pixel-art/services/art (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/ocboogie/pixel-art/models"
	reflect "reflect"
)

// ServiceArt is a mock of Service interface
type ServiceArt struct {
	ctrl     *gomock.Controller
	recorder *ServiceArtMockRecorder
}

// ServiceArtMockRecorder is the mock recorder for ServiceArt
type ServiceArtMockRecorder struct {
	mock *ServiceArt
}

// NewServiceArt creates a new mock instance
func NewServiceArt(ctrl *gomock.Controller) *ServiceArt {
	mock := &ServiceArt{ctrl: ctrl}
	mock.recorder = &ServiceArtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *ServiceArt) EXPECT() *ServiceArtMockRecorder {
	return m.recorder
}

// Format mocks base method
func (m *ServiceArt) Format() models.ArtFormat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format")
	ret0, _ := ret[0].(models.ArtFormat)
	return ret0
}

// Format indicates an expected call of Format
func (mr *ServiceArtMockRecorder) Format() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*ServiceArt)(nil).Format))
}

// Validate mocks base method
func (m *ServiceArt) Validate(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *ServiceArtMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*ServiceArt)(nil).Validate), arg0)
}
