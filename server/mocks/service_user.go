// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ocboogie/pixel-art/services/user (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/ocboogie/pixel-art/models"
	reflect "reflect"
)

// ServiceUser is a mock of Service interface
type ServiceUser struct {
	ctrl     *gomock.Controller
	recorder *ServiceUserMockRecorder
}

// ServiceUserMockRecorder is the mock recorder for ServiceUser
type ServiceUserMockRecorder struct {
	mock *ServiceUser
}

// NewServiceUser creates a new mock instance
func NewServiceUser(ctrl *gomock.Controller) *ServiceUser {
	mock := &ServiceUser{ctrl: ctrl}
	mock.recorder = &ServiceUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *ServiceUser) EXPECT() *ServiceUserMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *ServiceUser) Find(arg0 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *ServiceUserMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*ServiceUser)(nil).Find), arg0)
}

// Update mocks base method
func (m *ServiceUser) Update(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *ServiceUserMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*ServiceUser)(nil).Update), arg0)
}
