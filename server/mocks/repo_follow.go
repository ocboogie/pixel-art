// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ocboogie/pixel-art/repositories (interfaces: Follow)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// RepositoryFollow is a mock of Follow interface.
type RepositoryFollow struct {
	ctrl     *gomock.Controller
	recorder *RepositoryFollowMockRecorder
}

// RepositoryFollowMockRecorder is the mock recorder for RepositoryFollow.
type RepositoryFollowMockRecorder struct {
	mock *RepositoryFollow
}

// NewRepositoryFollow creates a new mock instance.
func NewRepositoryFollow(ctrl *gomock.Controller) *RepositoryFollow {
	mock := &RepositoryFollow{ctrl: ctrl}
	mock.recorder = &RepositoryFollowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RepositoryFollow) EXPECT() *RepositoryFollowMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *RepositoryFollow) Delete(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *RepositoryFollowMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*RepositoryFollow)(nil).Delete), arg0, arg1)
}

// Save mocks base method.
func (m *RepositoryFollow) Save(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *RepositoryFollowMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*RepositoryFollow)(nil).Save), arg0, arg1)
}
